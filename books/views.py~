# -*- coding: utf-8 -*-
# Create your views here.
from django.shortcuts import render_to_response, get_object_or_404
from django.contrib.auth.models import User
from django.template import RequestContext
from libri.models import Libro, Sito_consultabile, Autore
from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.contrib.auth.decorators import login_required
from datetime import datetime , date

AMBITI_LISTA = (
    ('Filosofia','A'),
    ('Teologia','B'),
    ('Sacra scrittura','C'),
    ('Documenti magisteriali','D'),
    ('Liturgia','E'),
    ('Storia','F'),
    ('Padri della Chiesa','G'),
    ('Spiritualita','H'),
    ('Cultura generale','I'),
    ('Testi scolastici','L'),
)

def paginaprincipale(request):
    totale_libri = len(Libro.objects.all())
    libri_disponibili = len(Libro.objects.filter(stato_prestito='D'))

    return render_to_response('main_page.html', {'totale_libri':totale_libri, 'libri_disponibili':libri_disponibili }, RequestContext(request))


def scheda_libro(request, pid_libro):
    libro = Libro.objects.get(id=pid_libro)
    materia = libro.materia
    try:
        ambito = materia[0]
        for amb in AMBITI_LISTA:
            if materia[0] == amb[1]:
                ambito = amb[0]
    except:
        ambito = ''
    stato_prestito = libro.get_stato_prestito_display()
    materia_display = libro.get_materia_display()
    return render_to_response('libro_view.html',
                            {'libro':libro, 'ambito':ambito,'materia':materia_display,'stato_prestito':stato_prestito}, RequestContext(request))



def prendi_libro(request, pid_libro):
    libro = Libro.objects.get(id=pid_libro)
    libro.stato_prestito = 'P'
    titolare_prestito = request.POST['titolare_prestito']
    libro.titolare_del_prestito = titolare_prestito
    libro.prestato_date = datetime.now()
    libro.save()
    messaggio = 'Hai preso in prestito il libro: %s' %libro.titolo
    return render_to_response('main_page.html', {'messaggio':messaggio}, RequestContext(request))   



def restituisci_libro(request, pid_libro):
    libro = Libro.objects.get(id=pid_libro)
    libro.stato_prestito = 'D'
    libro.titolare_del_prestito = ''
    libro.prestato_date = None
    libro.save()
    messaggio = 'Hai restituito il libro: %s' %libro.titolo 
    return render_to_response('main_page.html', {'messaggio':messaggio}, RequestContext(request))   

def listalibrifuori(request):
    libri = Libro.objects.all()     
    return render_to_response('listalibrifuori.html', {'libri':libri}, RequestContext(request))
    
def websites(request):
    lista_siti = Sito_consultabile.objects.all()    
    return render_to_response('siti_consultabili.html', {'lista_siti':lista_siti}, RequestContext(request))
    
def web1(request):
    url = request.GET['colleg']
    return render_to_response('web1.html', {'url':url}, RequestContext(request))
    
    
from django.core.paginator import Paginator,InvalidPage, EmptyPage
def libri_per_autore(request):    
    autori = Autore.objects.all().order_by('cognome')
    autori_libri = []
    for aut in autori:
        lista = []
        lista.append(aut)
        libri = Libro.objects.filter(autore=aut).order_by('titolo').distinct()
        lista.append(libri)        
        autori_libri.append(lista)
    #libri = Libro.objects.all().order_by('autore').distinct().reverse()

    paginator = Paginator(autori_libri, 100)
    

    # Make sure page request is an int. If not, deliver first page.
    try:
        page = int(request.GET.get('page', '1'))
    except ValueError:
        page = 1

    # If page request (9999) is out of range, deliver last page of results.
    try:
        autori_libri = paginator.page(page)
    except (EmptyPage, InvalidPage):
        autori_libri = paginator.page(paginator.num_pages)

    
    return render_to_response('libri_per_autore.html', {'libri':libri,'autori':autori_libri}, RequestContext(request))
    
